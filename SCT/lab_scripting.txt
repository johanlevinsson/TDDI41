1-1 Skillnaden på $@ och $* för att skicka vidare samtliga parametrar. 

	"$@" vecklas ut till en enda sträng
	"$*" vecklas ut till en sträng per parameter

	1-1.sh 

		#!/bin/bash


		function star () {
		    for i in "$*"
		    do 
		    echo $i 
		    done
		}

		function at () {
		    for j in "$@"
		    do 
		    echo $j 
		    done
		}

		echo "test för \$@ "
		star "a " "b " "c "


		echo "test för \$* "
		at "a " "b " "c "


	Testkörning: 

		johle727@li0-1:tddi41$ ./1-1.sh 
		test för $@ 
		a b c
		test för $* 
		a
		b
		c


2-1 Att inte använda citationstecken delar upp parametrar som innehåller blanksteg


	1-2.sh

		#!/bin/bash


		function quotestar () {
		    for i in "$*"
		    do 
		    echo $i 
		    done
		}

		function quoteat () {
		    for j in "$@"
		    do 
		    echo $j 
		    done
		}

		function star () {
		    for i in $*
		    do 
		    echo $i 
		    done
		}

		function at () {
		    for j in $@
		    do 
		    echo $j 
		    done
		}

		echo "test för \"\$@\" "
		quotestar "a b " "2-2"


		echo "test för \"\$*\" "
		quoteat "a b " "2-2"

		echo "test för \$@ "
		star "a b " "2-2"


		echo "test för \$* "
		at "a b " "2-2"

	Testkörning:

		johle727@li0-1:tddi41$ ./1-2.sh 
		test för "$@" 
		a b 2-2
		test för "$*" 
		a b
		2-2
		test för $@ 
		a
		b
		2-2
		test för $* 
		a
		b
		2-2

2-2

	Femte raden nedifrån, cp "$file" "$TMPDIR" körs nu en gång för hela filnamnet. Att byta "$@" mot "$*" i
	loopvillkoret får denna raden att köras en gång per blankstegskilt "ord" i filnamnet, och då skapa en fil
	per ord. Svaret är alltså nej. 


3-1 

	While loops fungerar genom att ett uttryck körs så länge som ett villkor stämmer snarare än ett fixt antal
	gånger

	1-3.sh

		#!/bin/bash

			function looper() {
			while [ $1 != "end" ]
			do
			    echo $1
			    shift
			done
			}

			x=1
			looper "5" "4" "3" "end"


	Testkörning:

		johle727@li0-1:tddi41$ ./1-3.sh 
		5
		4
		3








